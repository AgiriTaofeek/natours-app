{"mappings":"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","sources":["<anon>","public/js/index.js","public/js/login.js","public/js/alerts.js","public/js/updateSettings.js","public/js/mapBox.js","public/js/stripe.js"],"sourcesContent":["require(\"regenerator-runtime/runtime\");\nvar $d93yL$axios = require(\"axios\");\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*eslint-disable */ //NOTE - The core-js and regenerator-runtime/runtime packages are basically code that we need to be add to the final bundled js file to help polyfill the new JS features so that they would also work for older browsers\n\n/* eslint-disable */ //NOTE - We had to install axios in the way we did below because on the client-side js, we can't use the typical import from node_modules folder and we also had to specify type='module to the script tag of this file in the HTML\n// import axios from 'https://cdn.jsdelivr.net/npm/axios@1.6.5/+esm'\n//NOTE - With the help of parcel, we can hence, use the import from node_modules folder as below\n\n/* eslint-disable */ const $45c7f1aaeeaf655c$export$de026b00723010c1 = (type, msg, time = 7)=>{\n    // type parameter is either success or error\n    $45c7f1aaeeaf655c$export$516836c6a9dfc573() // Hide alert before showing just to be sure\n    ;\n    const markUp = `<div class='alert alert--${type}'>${msg}</div>`;\n    document.querySelector(\"body\").insertAdjacentHTML(\"afterbegin\", markUp) // the means that the markUp would be injected to as the 1st child element of the body element\n    ;\n    setTimeout($45c7f1aaeeaf655c$export$516836c6a9dfc573, time * 1000) //Hide alert after 5 secs\n    ;\n};\nconst $45c7f1aaeeaf655c$export$516836c6a9dfc573 = ()=>{\n    const el = document.querySelector(\".alert\");\n    if (el) el.parentElement.removeChild(el) // To hide the alert we injected into the body we traverse the element parent which is the body element and remove the first child\n    ;\n};\n\n\nconst $ff82a69a003bcfcf$export$596d806903d1f59e = async (email, password)=>{\n    // console.log(email, password)\n    try {\n        const res = await (0, ($parcel$interopDefault($d93yL$axios)))({\n            method: \"POST\",\n            // url: 'http://localhost:3000/api/v1/users/login', // For development\n            url: \"/api/v1/users/login\",\n            data: {\n                email: email,\n                password: password\n            }\n        });\n        // console.log(res)\n        if (res.data.status === \"success\") {\n            (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"success\", \"logged in successfully\");\n            setTimeout(()=>{\n                location.assign(\"/\") //This reloads the webpage to the '/' path after 1.5s automatically\n                ;\n            }, 1500);\n        }\n    } catch (err) {\n        (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"error\", err.response.data.message);\n    }\n};\nconst $ff82a69a003bcfcf$export$7200a869094fec36 = async (name, email, password, passwordConfirm)=>{\n    try {\n        const response = await (0, ($parcel$interopDefault($d93yL$axios)))({\n            method: \"POST\",\n            // url: 'http://localhost:3000/api/v1/users/signup', //development\n            url: \"/api/v1/users/signup\",\n            data: {\n                name: name,\n                email: email,\n                password: password,\n                passwordConfirm: passwordConfirm\n            }\n        });\n        if (response.data.status === \"success\") {\n            (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"success\", \"Account created successfully!\");\n            window.setTimeout(()=>{\n                location.assign(\"/\");\n            }, 1500);\n        }\n    } catch (error) {\n        (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"error\", error.response.data.message);\n    }\n};\nconst $ff82a69a003bcfcf$export$a0973bcfe11b05c9 = async ()=>{\n    try {\n        const res = await (0, ($parcel$interopDefault($d93yL$axios)))({\n            method: \"GET\",\n            // url: 'http://localhost:3000/api/v1/users/logout', // For development\n            url: \"/api/v1/users/logout\"\n        });\n        // if (res.data.status === 'success') location.reload(true) // This would force a reload from the server not from the browser cache which might not be ideal but it's best to assign the route back to the /login route\n        if (res.data.status === \"success\") location.assign(\"/login\");\n    } catch (err) {\n        (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"error\", \"Error logging out! try again\");\n    }\n};\n\n\n\n\n// TO reuse this function for also updating the password let's make it receive two parameters i.e data and type. the type can be 'data' and 'password'\nconst $0bbb4e0bf214adde$export$f558026a994b6051 = async (data, type)=>{\n    try {\n        // const url =\n        //     type === 'password'\n        //         ? 'http://localhost:3000/api/v1/users/updateMyPassword'\n        //         : 'http://localhost:3000/api/v1/users/updateMe'\n        const url = type === \"password\" ? \"/api/v1/users/updateMyPassword\" : \"/api/v1/users/updateMe\";\n        const res = await (0, ($parcel$interopDefault($d93yL$axios)))({\n            method: \"PATCH\",\n            url: url,\n            data: data\n        });\n        if (res.data.status === \"success\") (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"success\", `${type.toUpperCase()} updated successfully!`);\n    } catch (err) {\n        (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"error\", err.response.data.message);\n    }\n};\n\n\n/*eslint-disable */ // console.log('mapBox js ')\nconst $783ec2d652fbeb56$export$4c5dd147b21b9176 = (locations)=>{\n    mapboxgl.accessToken = \"pk.eyJ1IjoidG9sYW5pc2lyaXVzIiwiYSI6ImNscm1ucjYzZjA0N3MyanFsc25mOWJybjIifQ.pORofzlGVpCPqEzIVg3l2w\";\n    const map = new mapboxgl.Map({\n        container: \"map\",\n        style: \"mapbox://styles/tolanisirius/cl8zdhlw1005s14ldvwgj3bra/draft\",\n        scrollZoom: false\n    });\n    // Creating the boundary. think of it as a container. in js, it returns an object which has a method called extend() which we can use to extend our boundary based on those locations\n    const bounds = new mapboxgl.LngLatBounds();\n    // console.log(bounds)\n    locations.forEach((location)=>{\n        //create marker\n        const el = document.createElement(\"div\");\n        el.className = \"marker\";\n        // Add marker\n        new mapboxgl.Marker({\n            element: el,\n            anchor: \"bottom\"\n        }).setLngLat(location.coordinates).addTo(map);\n        // Create and add popup on the marker when hover\n        new mapboxgl.Popup({\n            offset: 30\n        }).setLngLat(location.coordinates).setHTML(`<p>Day ${location.day}: ${location.description}</p>`).addTo(map);\n        // Extend map bounds to include current location. This makes sure that all the locations are within a boundary using their lng and lat\n        bounds.extend(location.coordinates);\n    });\n    //Make the map visually fit within the boundary we extended above\n    map.fitBounds(bounds, {\n        padding: {\n            top: 200,\n            bottom: 150,\n            left: 100,\n            right: 100\n        }\n    });\n};\n\n\n/* eslint-disable */ \n\n// Stripe() function is exposed by the script tag\nconst $49fa8b65330243c2$var$stripe = Stripe(\"pk_test_51LsRpBJddqQBmSsEy6d7Xnx2x96O79KQf5BA7agqOfoVZY0ReCpqkTLuof8WSQGo7WHw73BEKNlZFsxPf1LGBIXc00RNouRXCe\");\nconst $49fa8b65330243c2$export$8d5bdbf26681c0c2 = async (tourId)=>{\n    try {\n        //(1) Get checkout session  from API\n        const session = await (0, ($parcel$interopDefault($d93yL$axios)))(// `http://127.0.0.1:3000/api/v1/bookings/checkout-session/${tourId}`\n        `/api/v1/bookings/checkout-session/${tourId}` //Production\n        );\n        // console.log(session);\n        //   console.log('stripe object',stripe);\n        //(2)  Create checkout form + charge credit card\n        await $49fa8b65330243c2$var$stripe.redirectToCheckout({\n            //This will redirect to the success_url in the getCheckoutSession function in the server\n            sessionId: session.data.session.id\n        });\n    } catch (err) {\n        console.log(err);\n        (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"error\", err);\n    }\n};\n\n\n\n// console.log('Hello from parceljs')\n//NOTE - Select DOM elements\nconst $3279f71929a81b70$var$mapBox = document.querySelector(\"#map\");\nconst $3279f71929a81b70$var$loginForm = document.querySelector(\".form--login\");\nconst $3279f71929a81b70$var$signupForm = document.querySelector(\".form--signup\");\nconst $3279f71929a81b70$var$logOutBtn = document.querySelector(\".nav__el--logout\");\nconst $3279f71929a81b70$var$userDataForm = document.querySelector(\".form-user-data\");\nconst $3279f71929a81b70$var$userPasswordForm = document.querySelector(\".form-user-password\");\nconst $3279f71929a81b70$var$bookBtn = document.getElementById(\"book-tour\");\n//NOTE - If the mapBox has been rendered on the DOM, Display the map\nif ($3279f71929a81b70$var$mapBox) {\n    const locations = JSON.parse($3279f71929a81b70$var$mapBox.dataset.locations);\n    (0, $783ec2d652fbeb56$export$4c5dd147b21b9176)(locations);\n}\n//NOTE - Handle the Login functionality\nif ($3279f71929a81b70$var$loginForm) $3279f71929a81b70$var$loginForm.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const email = document.getElementById(\"email\").value;\n    const password = document.getElementById(\"password\").value;\n    (0, $ff82a69a003bcfcf$export$596d806903d1f59e)(email, password);\n});\n//NOTE - Handle signup functionality\nif ($3279f71929a81b70$var$signupForm) // Getting name, email and password from \"/signup\" form\n$3279f71929a81b70$var$signupForm.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const name = document.getElementById(\"name\").value;\n    const email = document.getElementById(\"email\").value;\n    const password = document.getElementById(\"password\").value;\n    const passwordConfirm = document.getElementById(\"password-confirm\").value;\n    (0, $ff82a69a003bcfcf$export$7200a869094fec36)(name, email, password, passwordConfirm);\n});\n//NOTE - Handle logout functionality\nif ($3279f71929a81b70$var$logOutBtn) $3279f71929a81b70$var$logOutBtn.addEventListener(\"click\", (0, $ff82a69a003bcfcf$export$a0973bcfe11b05c9));\n//NOTE - Handle form data update\nif ($3279f71929a81b70$var$userDataForm) $3279f71929a81b70$var$userDataForm.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const form = new FormData() //The FormData object is used to construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest or fetch API. It uses the same format a form element would use if the encoding type were set to \"multipart/form-data\" but it does it programmatically.Note- The form is going to be an array of arrays.The arrays inside the parent array will consist of the name and value pair of each input field.\n    ;\n    //A new FormData object is being created and assigned to the variable form. This object can be used to append key/value pairs using the append method.  Here, the 'name' and 'email' keys are being associated with the values of the respective form fields. This FormData object can then be sent to a server using an HTTP request.\n    form.append(\"name\", document.getElementById(\"name\").value);\n    form.append(\"email\", document.getElementById(\"email\").value);\n    form.append(\"photo\", document.getElementById(\"photo\").files[0]) //This is the main reason we have use the formData() because we want the enctype to be set programmatically to multipart/form-data\n    ;\n    // console.log([...form.entries()]) //We have to it this way to see the arrays of array\n    (0, $0bbb4e0bf214adde$export$f558026a994b6051)(form, \"data\");\n});\n//NOTE - Handle password data update\nif ($3279f71929a81b70$var$userPasswordForm) $3279f71929a81b70$var$userPasswordForm.addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    document.querySelector(\".btn--save-password\").textContent = \"Updating...\";\n    const passwordCurrent = document.getElementById(\"password-current\").value;\n    const password = document.getElementById(\"password\").value;\n    const passwordConfirm = document.getElementById(\"password-confirm\").value;\n    await (0, $0bbb4e0bf214adde$export$f558026a994b6051)({\n        passwordCurrent: passwordCurrent,\n        password: password,\n        passwordConfirm: passwordConfirm\n    }, \"password\");\n    document.querySelector(\".btn--save-password\").textContent = \"save password\";\n    document.getElementById(\"password-current\").value = \"\";\n    document.getElementById(\"password\").value = \"\";\n    document.getElementById(\"password-confirm\").value = \"\";\n});\n//NOTE - Handle booking with stripe\nif ($3279f71929a81b70$var$bookBtn) $3279f71929a81b70$var$bookBtn.addEventListener(\"click\", (e)=>{\n    e.target.textContent = \"Processing ...\";\n    //Retrieve data from bookBtn HTML element\n    const { tourId: tourId } = e.target.dataset;\n    (0, $49fa8b65330243c2$export$8d5bdbf26681c0c2)(tourId);\n});\n//NOTE - Alert message display on the body element\nconst $3279f71929a81b70$var$alertMessage = document.querySelector(\"body\").dataset.alert;\nif ($3279f71929a81b70$var$alertMessage) (0, $45c7f1aaeeaf655c$export$de026b00723010c1)(\"success\", $3279f71929a81b70$var$alertMessage, 20);\n\n\n//# sourceMappingURL=index.js.map\n","/*eslint-disable */\n//NOTE - The core-js and regenerator-runtime/runtime packages are basically code that we need to be add to the final bundled js file to help polyfill the new JS features so that they would also work for older browsers\nimport 'core-js/stable'\nimport 'regenerator-runtime/runtime'\nimport { login, logout, signup } from './login'\nimport { updateSettings } from './updateSettings'\nimport { displayMap } from './mapBox'\nimport { bookTour } from './stripe'\nimport { showAlert } from './alerts'\n// console.log('Hello from parceljs')\n\n//NOTE - Select DOM elements\nconst mapBox = document.querySelector('#map')\nconst loginForm = document.querySelector('.form--login')\nconst signupForm = document.querySelector('.form--signup')\nconst logOutBtn = document.querySelector('.nav__el--logout')\nconst userDataForm = document.querySelector('.form-user-data')\nconst userPasswordForm = document.querySelector('.form-user-password')\nconst bookBtn = document.getElementById('book-tour')\n\n//NOTE - If the mapBox has been rendered on the DOM, Display the map\nif (mapBox) {\n    const locations = JSON.parse(mapBox.dataset.locations)\n    displayMap(locations)\n}\n\n//NOTE - Handle the Login functionality\nif (loginForm) {\n    loginForm.addEventListener('submit', (e) => {\n        e.preventDefault()\n        const email = document.getElementById('email').value\n        const password = document.getElementById('password').value\n        login(email, password)\n    })\n}\n\n//NOTE - Handle signup functionality\nif (signupForm) {\n    // Getting name, email and password from \"/signup\" form\n    signupForm.addEventListener('submit', (e) => {\n        e.preventDefault()\n\n        const name = document.getElementById('name').value\n        const email = document.getElementById('email').value\n        const password = document.getElementById('password').value\n        const passwordConfirm =\n            document.getElementById('password-confirm').value\n\n        signup(name, email, password, passwordConfirm)\n    })\n}\n//NOTE - Handle logout functionality\nif (logOutBtn) logOutBtn.addEventListener('click', logout)\n\n//NOTE - Handle form data update\nif (userDataForm) {\n    userDataForm.addEventListener('submit', (e) => {\n        e.preventDefault()\n        const form = new FormData() //The FormData object is used to construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest or fetch API. It uses the same format a form element would use if the encoding type were set to \"multipart/form-data\" but it does it programmatically.Note- The form is going to be an array of arrays.The arrays inside the parent array will consist of the name and value pair of each input field.\n\n        //A new FormData object is being created and assigned to the variable form. This object can be used to append key/value pairs using the append method.  Here, the 'name' and 'email' keys are being associated with the values of the respective form fields. This FormData object can then be sent to a server using an HTTP request.\n        form.append('name', document.getElementById('name').value)\n        form.append('email', document.getElementById('email').value)\n        form.append('photo', document.getElementById('photo').files[0]) //This is the main reason we have use the formData() because we want the enctype to be set programmatically to multipart/form-data\n        // console.log([...form.entries()]) //We have to it this way to see the arrays of array\n        updateSettings(form, 'data')\n    })\n}\n\n//NOTE - Handle password data update\nif (userPasswordForm) {\n    userPasswordForm.addEventListener('submit', async (e) => {\n        e.preventDefault()\n        document.querySelector('.btn--save-password').textContent =\n            'Updating...'\n\n        const passwordCurrent =\n            document.getElementById('password-current').value\n        const password = document.getElementById('password').value\n        const passwordConfirm =\n            document.getElementById('password-confirm').value\n        await updateSettings(\n            { passwordCurrent, password, passwordConfirm }, //variable names we used must match the name of the properties in the DB i.e passwordCurrent, password and passwordConfirm because we are passing them directly as object\n            'password'\n        )\n        document.querySelector('.btn--save-password').textContent =\n            'save password'\n        document.getElementById('password-current').value = ''\n        document.getElementById('password').value = ''\n        document.getElementById('password-confirm').value = ''\n    })\n}\n\n//NOTE - Handle booking with stripe\nif (bookBtn) {\n    bookBtn.addEventListener('click', (e) => {\n        e.target.textContent = 'Processing ...'\n        //Retrieve data from bookBtn HTML element\n        const { tourId } = e.target.dataset\n        bookTour(tourId)\n    })\n}\n\n//NOTE - Alert message display on the body element\nconst alertMessage = document.querySelector('body').dataset.alert\nif (alertMessage) showAlert('success', alertMessage, 20)\n","/* eslint-disable */\n//NOTE - We had to install axios in the way we did below because on the client-side js, we can't use the typical import from node_modules folder and we also had to specify type='module to the script tag of this file in the HTML\n// import axios from 'https://cdn.jsdelivr.net/npm/axios@1.6.5/+esm'\n//NOTE - With the help of parcel, we can hence, use the import from node_modules folder as below\nimport axios from 'axios'\nimport { showAlert } from './alerts'\n// console.log('login js')\n\n//NOTE -  we are able to use these login.js file as a module because of bundling with Parcel.js\nexport const login = async (email, password) => {\n    // console.log(email, password)\n    try {\n        const res = await axios({\n            method: 'POST',\n            // url: 'http://localhost:3000/api/v1/users/login', // For development\n            url: '/api/v1/users/login', // For production\n            data: {\n                email,\n                password,\n            },\n        })\n\n        // console.log(res)\n        if (res.data.status === 'success') {\n            showAlert('success', 'logged in successfully')\n            setTimeout(() => {\n                location.assign('/') //This reloads the webpage to the '/' path after 1.5s automatically\n            }, 1500)\n        }\n    } catch (err) {\n        showAlert('error', err.response.data.message)\n    }\n}\n\nexport const signup = async (name, email, password, passwordConfirm) => {\n    try {\n        const response = await axios({\n            method: 'POST',\n            // url: 'http://localhost:3000/api/v1/users/signup', //development\n            url: '/api/v1/users/signup', //Production\n            data: {\n                name,\n                email,\n                password,\n                passwordConfirm,\n            },\n        })\n\n        if (response.data.status === 'success') {\n            showAlert('success', 'Account created successfully!')\n            window.setTimeout(() => {\n                location.assign('/')\n            }, 1500)\n        }\n    } catch (error) {\n        showAlert('error', error.response.data.message)\n    }\n}\n\nexport const logout = async () => {\n    try {\n        const res = await axios({\n            method: 'GET',\n            // url: 'http://localhost:3000/api/v1/users/logout', // For development\n            url: '/api/v1/users/logout', // For Production\n        })\n\n        // if (res.data.status === 'success') location.reload(true) // This would force a reload from the server not from the browser cache which might not be ideal but it's best to assign the route back to the /login route\n        if (res.data.status === 'success') location.assign('/login')\n    } catch (err) {\n        showAlert('error', 'Error logging out! try again')\n    }\n}\n","/* eslint-disable */\nexport const showAlert = (type, msg, time = 7) => {\n    // type parameter is either success or error\n    hideAlert() // Hide alert before showing just to be sure\n    const markUp = `<div class='alert alert--${type}'>${msg}</div>`\n    document.querySelector('body').insertAdjacentHTML('afterbegin', markUp) // the means that the markUp would be injected to as the 1st child element of the body element\n    setTimeout(hideAlert, time * 1000) //Hide alert after 5 secs\n}\nexport const hideAlert = () => {\n    const el = document.querySelector('.alert')\n    if (el) el.parentElement.removeChild(el) // To hide the alert we injected into the body we traverse the element parent which is the body element and remove the first child\n}\n","import axios from 'axios'\nimport { showAlert } from './alerts'\n\n// TO reuse this function for also updating the password let's make it receive two parameters i.e data and type. the type can be 'data' and 'password'\nconst updateSettings = async (data, type) => {\n    try {\n        // const url =\n        //     type === 'password'\n        //         ? 'http://localhost:3000/api/v1/users/updateMyPassword'\n        //         : 'http://localhost:3000/api/v1/users/updateMe'\n        const url =\n            type === 'password'\n                ? '/api/v1/users/updateMyPassword'\n                : '/api/v1/users/updateMe'\n        const res = await axios({\n            method: 'PATCH',\n            url,\n            data,\n        })\n\n        if (res.data.status === 'success') {\n            showAlert('success', `${type.toUpperCase()} updated successfully!`)\n        }\n    } catch (err) {\n        showAlert('error', err.response.data.message)\n    }\n}\n\nexport { updateSettings }\n","/*eslint-disable */\n// console.log('mapBox js ')\nexport const displayMap = (locations) => {\n    mapboxgl.accessToken =\n        'pk.eyJ1IjoidG9sYW5pc2lyaXVzIiwiYSI6ImNscm1ucjYzZjA0N3MyanFsc25mOWJybjIifQ.pORofzlGVpCPqEzIVg3l2w'\n    const map = new mapboxgl.Map({\n        container: 'map', // container ID\n        style: 'mapbox://styles/tolanisirius/cl8zdhlw1005s14ldvwgj3bra/draft', // style URL\n        scrollZoom: false,\n        // center: [-74.5, 40], // starting position [lng, lat]\n        // zoom: 9, // starting zoom\n    })\n\n    // Creating the boundary. think of it as a container. in js, it returns an object which has a method called extend() which we can use to extend our boundary based on those locations\n    const bounds = new mapboxgl.LngLatBounds()\n    // console.log(bounds)\n    locations.forEach((location) => {\n        //create marker\n        const el = document.createElement('div')\n        el.className = 'marker'\n\n        // Add marker\n        new mapboxgl.Marker({\n            element: el,\n            anchor: 'bottom',\n        })\n            .setLngLat(location.coordinates)\n            .addTo(map)\n\n        // Create and add popup on the marker when hover\n        new mapboxgl.Popup({\n            offset: 30,\n        })\n            .setLngLat(location.coordinates)\n            .setHTML(`<p>Day ${location.day}: ${location.description}</p>`)\n            .addTo(map)\n\n        // Extend map bounds to include current location. This makes sure that all the locations are within a boundary using their lng and lat\n        bounds.extend(location.coordinates)\n    })\n\n    //Make the map visually fit within the boundary we extended above\n    map.fitBounds(bounds, {\n        padding: {\n            top: 200,\n            bottom: 150,\n            left: 100,\n            right: 100,\n        },\n    })\n}\n","/* eslint-disable */\nimport axios from 'axios'\nimport { showAlert } from './alerts'\n\n// Stripe() function is exposed by the script tag\nconst stripe = Stripe(\n    'pk_test_51LsRpBJddqQBmSsEy6d7Xnx2x96O79KQf5BA7agqOfoVZY0ReCpqkTLuof8WSQGo7WHw73BEKNlZFsxPf1LGBIXc00RNouRXCe'\n)\n\nexport const bookTour = async (tourId) => {\n    try {\n        //(1) Get checkout session  from API\n        const session = await axios(\n            // `http://127.0.0.1:3000/api/v1/bookings/checkout-session/${tourId}`\n            `/api/v1/bookings/checkout-session/${tourId}` //Production\n        )\n\n        // console.log(session);\n        //   console.log('stripe object',stripe);\n\n        //(2)  Create checkout form + charge credit card\n        await stripe.redirectToCheckout({\n            //This will redirect to the success_url in the getCheckoutSession function in the server\n            sessionId: session.data.session.id,\n        })\n    } catch (err) {\n        console.log(err)\n        showAlert('error', err)\n    }\n}\n"],"names":["require","$d93yL$axios","$parcel$interopDefault","a","__esModule","default","$45c7f1aaeeaf655c$export$de026b00723010c1","type","msg","time","$45c7f1aaeeaf655c$export$516836c6a9dfc573","markUp","document","querySelector","insertAdjacentHTML","setTimeout","el","parentElement","removeChild","$ff82a69a003bcfcf$export$596d806903d1f59e","email","password","res","method","url","data","status","location","assign","err","response","message","$ff82a69a003bcfcf$export$7200a869094fec36","name","passwordConfirm","window","error","$ff82a69a003bcfcf$export$a0973bcfe11b05c9","$0bbb4e0bf214adde$export$f558026a994b6051","toUpperCase","$49fa8b65330243c2$var$stripe","Stripe","$49fa8b65330243c2$export$8d5bdbf26681c0c2","tourId","session","redirectToCheckout","sessionId","id","console","log","$3279f71929a81b70$var$mapBox","$3279f71929a81b70$var$loginForm","$3279f71929a81b70$var$signupForm","$3279f71929a81b70$var$logOutBtn","$3279f71929a81b70$var$userDataForm","$3279f71929a81b70$var$userPasswordForm","$3279f71929a81b70$var$bookBtn","getElementById","locations","mapboxgl","accessToken","map","Map","container","style","scrollZoom","bounds","LngLatBounds","forEach","createElement","className","Marker","element","anchor","setLngLat","coordinates","addTo","Popup","offset","setHTML","day","description","extend","fitBounds","padding","top","bottom","left","right","JSON","parse","dataset","addEventListener","e","preventDefault","value","form","FormData","append","files","textContent","passwordCurrent","target","$3279f71929a81b70$var$alertMessage","alert"],"version":3,"file":"index.js.map","sourceRoot":"../../../"}